#!/usr/bin/env bash

STARTFILE="startfile"
PARADIR="../para"
TESTDIR="../tests"

# ---------- Helper functions ----------

latest_dump_number() {
    local files=("$PWD"/data/bin*[0-9]*.dat)
    [ -e "${files[0]}" ] || { echo 0; return; }
    local latest=$(ls -1t "${files[@]}" 2>/dev/null | head -n1)
    local num=$(basename "$latest" | sed -E 's/^bin0*([0-9]+).*/\1/')
    echo "$num"
}

update_startfile() {
    local mode="$1"
    local simtype="$2"
    local startnum="$3"

    awk -v mode="$mode" -v simtype="$simtype" -v startnum="$startnum" '
    function replace_line(line, key, value, quoted,    comment, cpos, indent) {
        # Extract trailing comment
        comment=""
        cpos=index(line,"!")
        if (cpos > 0) {
            comment=substr(line,cpos)
            line=substr(line,1,cpos-1)
        }
        # Extract indentation + "key ="
        match(line, "^[[:space:]]*" key "[[:space:]]*=")
        indent=substr(line,RSTART,RLENGTH)
        # Wrap in quotes if flagged
        if (quoted) {
            value = "'"'"'" value "'"'"'"
        }
        # Print replacement
        printf("%s%s%s%s\n", indent, value, (comment != "" ? " " : ""), comment)
    }

    BEGIN { inblock=0; seen_start=0; seen_simtype=0; seen_parafile=0 }

    /^[[:space:]]*&startcon/ { inblock=1 }

    inblock && /^[[:space:]]*\// {
        if (!seen_start)    print "  start = " startnum
        if (mode != "continue") {
            if (!seen_simtype) printf("  simtype = '\''%s'\''\n", simtype)
            if (!seen_parafile) printf("  parafile = '\''parameters'\''\n")
        }
        inblock=0
    }

    {
        if (inblock && $0 ~ /^[[:space:]]*start[[:space:]]*=/) {
            replace_line($0, "start", startnum, 0)
            seen_start=1; next
        }

        if (inblock && $0 ~ /^[[:space:]]*simtype[[:space:]]*=/ && mode != "continue") {
            replace_line($0, "simtype", simtype, 1)
            seen_simtype=1; next
        }

        if (inblock && $0 ~ /^[[:space:]]*parafile[[:space:]]*=/ && mode != "continue") {
            replace_line($0, "parafile", "parameters", 1)
            seen_parafile=1; next
        }

        print
    }
    ' "$STARTFILE" > "$STARTFILE.tmp" && mv "$STARTFILE.tmp" "$STARTFILE"
}

# ---------- Main script ----------

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    if [ $# -lt 1 ]; then
	shopt -s nullglob
	for f in "$PARADIR"/parameters_*; do
            bn=${f##*/parameters_}
            [ "$bn" = "base" ] && continue
            simtypes+=("$bn")
	done
	shopt -u nullglob
	{
        echo "Usage: $0 <continue|simtype> [test]"
        echo
        echo "Restart simulation from the latest dump"
	echo "- continue"
	echo
	echo "Start simulation for a simtype"
	echo "<simtype> options"
        for name in "${simtypes[@]}"; do
            echo "- $name"
        done
	echo
	echo "Add 'test' as a second argument if running a test"
	} | more
        exit 1
    fi

    MODE="$1"
    shift
    TESTFLAG=""

    if [ "$1" = "test" ]; then
        TESTFLAG="test"
        shift
    fi

    if [ "$MODE" = "continue" ]; then
        STARTNUM=$(latest_dump_number)
        update_startfile "continue" "" "$STARTNUM"
    else
        STARTNUM=0
        # Append " test" if requested
        SIMTYPE_TO_WRITE="$MODE"
        if [ "$TESTFLAG" = "test" ]; then
            SIMTYPE_TO_WRITE="$SIMTYPE_TO_WRITE test"
        fi
        update_startfile "new" "$SIMTYPE_TO_WRITE" "$STARTNUM"

        cp "$PARADIR/parameters_$MODE" ./parameters || {
            echo "Error: no parameters file for simtype '$MODE'"
            exit 1
        }
        if [ -f "$PARADIR/extras_$MODE" ]; then
            cp "$PARADIR/extras_$MODE" ./extras
        fi
    fi
fi
